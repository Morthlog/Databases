/* Display all fantasy movie titles and their average rating, with an average rating above 4
--Output: 14 rows
*/
SELECT m.title, ROUND(AVG(r.rating),2) AS avg_rating
FROM movie m
JOIN ratings r ON m.id = r.movie_id
JOIN hasgenre hg ON m.id = hg.movie_id
JOIN genre g ON hg.genre_id = g.id
WHERE g.name = 'Fantasy'
GROUP BY m.title
HAVING AVG(r.rating) > 4;

/* Display all movies where Arnold Schwarzenegger is an actor
Output: 32 rows
*/
SELECT m.title
FROM movie m
JOIN movie_cast mc ON m.id = mc.movie_id
WHERE mc.name = 'Arnold Schwarzenegger';

/* Display all adventure movie titles, budget, and release date, with a budget > 100,000,000 after the year 2000
Output: 29 rows
*/
SELECT m.title,m.budget,m.release_date
FROM movie m
JOIN hasgenre hg ON m.id = hg.movie_id
JOIN genre g ON hg.genre_id = g.id
WHERE g.name = 'Adventure' AND m.budget>100000000 AND YEAR(m.release_date)> 2000;

/* Display all movie titles, their revenue and average rating, with revenue > 900,000,000 in descending order of revenue
Output: 8 rows
*/
SELECT m.title, FORMAT(m.revenue, '#,###') AS Revenue, ROUND(AVG(r.rating),2) AS avg_rating
FROM movie m
LEFT OUTER JOIN ratings r ON m.id = r.movie_id
WHERE m.revenue > 900000000
GROUP BY m.title, m.revenue
ORDER BY m.revenue DESC;

/* Display the top 10 most popular movies with keywords containing "bomb" or "atomic"
Output: 10 rows */
SELECT DISTINCT TOP(10)  m.title, m.popularity
FROM movie m
JOIN hasKeyword hk ON m.id = hk.movie_id
JOIN keyword k ON hk.key_id = k.id
WHERE k.name LIKE '%bomb%'OR k.name LIKE '%atomic%'
ORDER BY m.popularity DESC;

/* Display production companies and the titles of the top 10 most profitable movies
Output: 24 rows */
SELECT pc.name, m.title 
FROM movie m
JOIN hasProductioncompany hpc ON hpc.movie_id=m.id
JOIN productioncompany pc ON hpc.pc_id=pc.id
WHERE m.id IN (
    SELECT TOP(10) id
    FROM movie
    ORDER BY revenue DESC)
ORDER BY m.title;
	
/* Display the top 10 best directors with their highest-rated movies, in descending order of ratings
Output: 10 rows
*/
SELECT TOP (10) c.name as 'Director''s names', avg(r.rating) as 'Average Ratings', m.title as  'Movie''s name'
FROM movie m
INNER JOIN ratings r ON m.id = r.movie_id
INNER JOIN movie_crew c ON m.id = c.movie_id
WHERE c.name IN  
(
    SELECT c.name
    FROM movie_crew c
    WHERE c.job = 'Director' AND m.id = c.movie_id
) 
GROUP BY c.name, m.title
ORDER BY 'Average Ratings' DESC;

/* Display the total crew and cast who worked on the "lord of the rings" collection
Output: 97 rows
*/
WITH movieIDs AS 
(
    SELECT b.movie_id
    FROM collection co
    INNER JOIN belongsTocollection b
    ON b.collection_id = co.id
    WHERE co.name ='The Lord of the Rings Collection'
)

SELECT DISTINCT cr.name, cr.job AS 'Role'
FROM movie m
FULL OUTER JOIN movie_crew cr ON cr.movie_id = m.id
WHERE cr.movie_id IN (SELECT movie_id FROM movieIDs)

UNION ALL

SELECT DISTINCT ca.name, ca.character AS 'Role'
FROM movie m
FULL OUTER JOIN movie_cast ca ON ca.movie_id = m.id
WHERE ca.movie_id IN (SELECT movie_id FROM movieIDs);

/* Display the movies from "Walt Disney Pictures" and "Universal Pictures" with revenue > 500,000,000
Output: 8 rows 
*/
SELECT m.title, FORMAT(m.revenue, '#,###') AS Revenue, pr.name
FROM movie m
INNER JOIN HasProductioncompany has ON has.movie_id = m.id
INNER JOIN productioncompany pr ON pr.id = has.pc_id
WHERE m.id IN 
(
    SELECT has.movie_id
    WHERE pr.name = 'Walt Disney Pictures'
        OR pr.name = 'Universal Pictures'
)
    AND m.revenue > 500000000;

/* Display all movies with an average rating between 3 and 4.5 and at least 100 reviews
Output: 59 rows
*/ 
SELECT m.title, ROUND(avg(r.rating),2) as 'Average Rating', COUNT(r.rating) as 'Total reviews'
FROM movie m
INNER JOIN ratings r ON r.movie_id = m.id
GROUP BY m.title
HAVING avg(r.rating) BETWEEN 3 AND 4.5
    AND COUNT(r.rating) > 100
ORDER BY COUNT(r.rating) DESC;

/* Display all movies from any Batman collection with at least 7.5% popularity and the highest revenue generated by any of them
Output: 5 rows
*/
SELECT m.title, m.popularity, co.name, 
(
    SELECT FORMAT(MAX(m.revenue), '#,###')
    FROM movie m
    INNER JOIN belongsTocollection b ON b.movie_id = m.id
    INNER JOIN collection co ON b.collection_id = co.id
    WHERE co.name LIKE '%Batman%'
) AS 'Most Revenue'
FROM movie m
INNER JOIN belongsTocollection b ON b.movie_id = m.id
INNER JOIN collection co ON b.collection_id = co.id
GROUP BY m.id, m.title, co.name, m.popularity, b.movie_id, m.revenue
HAVING popularity >7.5 AND co.name IN 
(
    SELECT co.name
    WHERE co.name LIKE '%Batman%'
    AND b.movie_id = m.id
) ;

/* Display the movies with the lowest average rating (excluding 0), along with the number of reviews
Output: 8 rows
*/
WITH averageR AS
(
    SELECT avg(r.rating) AS AVG
    FROM movie m
    INNER JOIN ratings r
    ON m.id = r.movie_id
    GROUP BY m.id, m.title
)

SELECT m.title, ROUND(avg(r.rating),2) as 'Lowest Rating', COUNT(r.rating) AS 'Ratings'
FROM movie m
INNER JOIN ratings r ON r.movie_id = m.id
GROUP BY m.title, r.movie_id
HAVING avg(r.rating) IN
(
    SELECT MIN(AVG) FROM averageR
);